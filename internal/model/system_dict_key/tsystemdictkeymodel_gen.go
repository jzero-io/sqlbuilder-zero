// Code generated by goctl. DO NOT EDIT.

package system_dict_key

import (
	"context"
	"database/sql"
	"strings"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSystemDictKeyFieldNames          = builder.RawFieldNames(&TSystemDictKey{})
	tSystemDictKeyRows                = strings.Join(tSystemDictKeyFieldNames, ",")
	tSystemDictKeyRowsExpectAutoSet   = strings.Join(stringx.Remove(tSystemDictKeyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tSystemDictKeyRowsWithPlaceHolder = strings.Join(stringx.Remove(tSystemDictKeyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tSystemDictKeyModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TSystemDictKey) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *TSystemDictKey) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*TSystemDictKey, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id int64) (*TSystemDictKey, error)
		FindOneByCategoryCode(ctx context.Context, session sqlx.Session, categoryCode string) (*TSystemDictKey, error)
		FindOneByCategoryCodeWithCache(ctx context.Context, session sqlx.Session, categoryCode string) (*TSystemDictKey, error)
		FindOneByUuid(ctx context.Context, session sqlx.Session, uuid string) (*TSystemDictKey, error)
		FindOneByUuidWithCache(ctx context.Context, session sqlx.Session, uuid string) (*TSystemDictKey, error)
		Update(ctx context.Context, session sqlx.Session, data *TSystemDictKey) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *TSystemDictKey) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id int64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*TSystemDictKey) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSystemDictKey, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TSystemDictKey, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSystemDictKey, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultTSystemDictKeyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TSystemDictKey struct {
		Id           int64  `db:"id"`
		Uuid         string `db:"uuid"`          // uuid
		CategoryCode string `db:"category_code"` // 字典类型
		CategoryDesc string `db:"category_desc"` // 字典描述
		Sort         int64  `db:"sort"`          // 排序（升序）
	}
)

func newTSystemDictKeyModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultTSystemDictKeyModel {

	return &defaultTSystemDictKeyModel{

		conn:  conn,
		table: "`T_system_dict_key`",
	}
}

func (m *defaultTSystemDictKeyModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultTSystemDictKeyModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id int64) error {
	return m.Delete(ctx, session, id)
}

func (m *defaultTSystemDictKeyModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*TSystemDictKey, error) {
	sb := sqlbuilder.Select(tSystemDictKeyRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp TSystemDictKey
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id int64) (*TSystemDictKey, error) {
	return m.FindOne(ctx, session, id)
}

func (m *defaultTSystemDictKeyModel) FindOneByCategoryCode(ctx context.Context, session sqlx.Session, categoryCode string) (*TSystemDictKey, error) {
	var resp TSystemDictKey
	var err error

	sb := sqlbuilder.Select(tSystemDictKeyRows).From(m.table)
	sb.Where(sb.EQ(strings.Split(strings.ReplaceAll("`category_code` = ?", " ", ""), "=")[0], categoryCode))
	sb.Limit(1)

	sql, args := sb.Build()

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) FindOneByCategoryCodeWithCache(ctx context.Context, session sqlx.Session, categoryCode string) (*TSystemDictKey, error) {
	return m.FindOneByCategoryCode(ctx, session, categoryCode)
}

func (m *defaultTSystemDictKeyModel) FindOneByUuid(ctx context.Context, session sqlx.Session, uuid string) (*TSystemDictKey, error) {
	var resp TSystemDictKey
	var err error

	sb := sqlbuilder.Select(tSystemDictKeyRows).From(m.table)
	sb.Where(sb.EQ(strings.Split(strings.ReplaceAll("`uuid` = ?", " ", ""), "=")[0], uuid))
	sb.Limit(1)

	sql, args := sb.Build()

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) FindOneByUuidWithCache(ctx context.Context, session sqlx.Session, uuid string) (*TSystemDictKey, error) {
	return m.FindOneByUuid(ctx, session, uuid)
}

func (m *defaultTSystemDictKeyModel) Insert(ctx context.Context, session sqlx.Session, data *TSystemDictKey) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tSystemDictKeyRowsExpectAutoSet).
		Values(data.Uuid, data.CategoryCode, data.CategoryDesc, data.Sort).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultTSystemDictKeyModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *TSystemDictKey) (sql.Result, error) {
	return m.Insert(ctx, session, data)
}
func (m *defaultTSystemDictKeyModel) Update(ctx context.Context, session sqlx.Session, newData *TSystemDictKey) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(tSystemDictKeyRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, newData.Uuid, newData.CategoryCode, newData.CategoryDesc, newData.Sort, newData.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, newData.Uuid, newData.CategoryCode, newData.CategoryDesc, newData.Sort, newData.Id)
	}
	return err
}

func (m *defaultTSystemDictKeyModel) UpdateWithCache(ctx context.Context, session sqlx.Session, newData *TSystemDictKey) error {
	return m.Update(ctx, session, newData)
}

func (m *defaultTSystemDictKeyModel) tableName() string {
	return m.table
}

func (m *customTSystemDictKeyModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*TSystemDictKey) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(tSystemDictKeyRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Uuid, data.CategoryCode, data.CategoryDesc, data.Sort)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customTSystemDictKeyModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSystemDictKey, error) {
	sb := sqlbuilder.Select(tSystemDictKeyFieldNames...).From(m.table)
	condition.ApplySelect(sb, conds...)
	statement, args := sb.Build()

	var resp []*TSystemDictKey
	var err error

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customTSystemDictKeyModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TSystemDictKey, error) {
	sb := sqlbuilder.Select(tSystemDictKeyFieldNames...).From(m.table)

	condition.ApplySelect(sb, conds...)
	sb.Limit(1)
	statement, args := sb.Build()

	var resp TSystemDictKey
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customTSystemDictKeyModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSystemDictKey, int64, error) {
	sb := sqlbuilder.Select(tSystemDictKeyFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.ApplySelect(sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	condition.ApplySelect(countsb, countConds...)

	var resp []*TSystemDictKey
	var err error

	statement, args := sb.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	var total int64
	statement, args = countsb.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customTSystemDictKeyModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	condition.ApplyUpdate(sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	sb.Set(assigns...)

	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customTSystemDictKeyModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	condition.ApplyDelete(sb, conds...)
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
